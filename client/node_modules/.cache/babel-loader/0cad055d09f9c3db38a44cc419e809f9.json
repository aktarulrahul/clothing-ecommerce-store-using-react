{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rahul/Desktop/Project/React/clothing-ecommerce-store-using-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsAsync),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsStart);\n\nimport { takeLatest, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function fetchCollectionsAsync() {\n  var collectionRef, snapshot, collectionsMap;\n  return _regeneratorRuntime.wrap(function fetchCollectionsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          collectionRef = firestore.collection('collection');\n          _context.next = 4;\n          return collectionRef.get();\n\n        case 4:\n          snapshot = _context.sent;\n          _context.next = 7;\n          return call(convertCollectionsSnapshotToMap, snapshot);\n\n        case 7:\n          collectionsMap = _context.sent;\n          _context.next = 10;\n          return put(fetchCollectionsSuccess(collectionsMap));\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 16;\n          return put(fetchCollectionsFailure(_context.t0.message));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}\nexport function fetchCollectionsStart() {\n  return _regeneratorRuntime.wrap(function fetchCollectionsStart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/Users/rahul/Desktop/Project/React/clothing-ecommerce-store-using-react/src/redux/shop/shop.sagas.js"],"names":["fetchCollectionsAsync","fetchCollectionsStart","takeLatest","call","put","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","collectionRef","collection","get","snapshot","collectionsMap","message","FETCH_COLLECTIONS_START"],"mappings":";;oDAWiBA,qB;qDAiBAC,qB;;AA5BjB,SAAQC,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,QAAoC,oBAApC;AAEA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AAEA,SACAC,uBADA,EAEAC,uBAFA,QAGO,gBAHP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,SAAUT,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGGU,UAAAA,aAHH,GAGmBL,SAAS,CAACM,UAAV,CAAqB,YAArB,CAHnB;AAAA;AAIc,iBAAMD,aAAa,CAACE,GAAd,EAAN;;AAJd;AAIGC,UAAAA,QAJH;AAAA;AAKoB,iBAAMV,IAAI,CAACG,+BAAD,EAAkCO,QAAlC,CAAV;;AALpB;AAKGC,UAAAA,cALH;AAAA;AAMH,iBAAMV,GAAG,CAACG,uBAAuB,CAACO,cAAD,CAAxB,CAAT;;AANG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQH,iBAAMV,GAAG,CAACI,uBAAuB,CAAC,YAAMO,OAAP,CAAxB,CAAT;;AARG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBP,OAAO,SAAUd,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMC,UAAU,CACZO,eAAe,CAACO,uBADJ,EAEZhB,qBAFY,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {takeLatest, call, put} from 'redux-saga/effects';\n\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\n\nimport {\nfetchCollectionsSuccess,\nfetchCollectionsFailure\n} from './shop.actions';\n\nimport ShopActionTypes from './shop.types';\n\nexport function* fetchCollectionsAsync(){\n    // yield console.log('I am fired');\ntry{\n    const collectionRef = firestore.collection('collection');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n} catch (error){\n    yield put(fetchCollectionsFailure(error.message));\n}\n    // const collectionRef = firestore.collection('collection');\n    // collectionRef.get().then(snapshot => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //     dispatch(fetchCollectionsSuccess(collectionsMap));\n    // }).catch(error => dispatch(fetchCollectionsFailure(error.message)))\n}\n\nexport function* fetchCollectionsStart(){\n    yield takeLatest(\n        ShopActionTypes.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync\n        );\n}\n"]},"metadata":{},"sourceType":"module"}