{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/rahul/Desktop/Project/React/clothing-ecommerce-store-using-react/src/pages/shop/shop.component.jsx\";\n\nimport React, { useEffect } from 'react';\nimport { Route } from 'react-router-dom'; // import {createStructuredSelector} from 'reselect';\n\nimport { connect } from 'react-redux'; // import {selectIsCollectionsLoaded} from '../../redux/shop/shop.selectors';\n\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPageContainer from '../collection/collection.container'; // import {fetchCollectionsStartAsync} from '../../redux/shop/shop.actions';\n\nimport { fetchCollectionsStart as _fetchCollectionsStart } from '../../redux/shop/shop.actions'; // import {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\n// import WithSpinner from '../../components/with-spinner/with-spinner.component';\n// const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n// class ShopPage extends React.Component {\n//   // state = {\n//   //     loading: true,\n//   //   }\n//   // unsubscribeFromSnapshot = null;\n//   componentDidMount() {\n//   //   const {updateCollections} = this.props;\n//   //   const collectionRef = firestore.collection('collection');\n//   // // fetch('https://firestore.googleapis.com/v1/projects/clothing-ecommerce-react-c3cf5/databases/(default)/documents/collection')\n//   // // .then(response => response.json())\n//   // // .then(collections => console.log(collections))\n//   // collectionRef.get().then(snapshot => {\n//   //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//   //     updateCollections(collectionsMap);\n//   //     this.setState({loading: false});\n//   //   })\n//   const { fetchCollectionsStart} = this.props;\n//   fetchCollectionsStart();\n//   }\n//   render(){\n//     const {match} = this.props;\n//     // const {loading} = this.state;\n\nvar ShopPage = function ShopPage(_ref) {\n  var fetchCollectionsStart = _ref.fetchCollectionsStart,\n      match = _ref.match;\n  useEffect(function () {\n    fetchCollectionsStart();\n  }, [fetchCollectionsStart]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"shop-page\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"\".concat(match.path) // render={(props) =><CollectionsOverviewWithSpinner isLoading={isCollectionFetching} {...props} />}\n    ,\n    component: CollectionsOverviewContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"\".concat(match.path, \"/:collectionId\") // render={(props) =><CollectionPageWithSpinner isLoading={!selectIsCollectionsLoaded} {...props} />}\n    ,\n    component: CollectionPageContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }));\n}; // }\n// const mapStateToProps = createStructuredSelector({\n//   // isCollectionFetching: selectIsCollectionFetching,\n//   selectIsCollectionsLoaded: selectIsCollectionsLoaded\n// })\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    // updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n    fetchCollectionsStart: function fetchCollectionsStart() {\n      return dispatch(_fetchCollectionsStart());\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/rahul/Desktop/Project/React/clothing-ecommerce-store-using-react/src/pages/shop/shop.component.jsx"],"names":["React","useEffect","Route","connect","CollectionsOverviewContainer","CollectionPageContainer","fetchCollectionsStart","ShopPage","match","path","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,KAAR,QAAoB,kBAApB,C,CACA;;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAEA;;AAEA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,OAAOC,uBAAP,MAAoC,oCAApC,C,CAEA;;AACA,SAAQC,qBAAqB,IAArBA,sBAAR,QAAoC,+BAApC,C,CAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,QAAQ,GAAE,SAAVA,QAAU,OAAmC;AAAA,MAAjCD,qBAAiC,QAAjCA,qBAAiC;AAAA,MAAVE,KAAU,QAAVA,KAAU;AACjDP,EAAAA,SAAS,CAAC,YAAK;AACbK,IAAAA,qBAAqB;AACtB,GAFQ,EAEP,CAACA,qBAAD,CAFO,CAAT;AAGE,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,KAAD;AACA,IAAA,KAAK,MADL;AAEA,IAAA,IAAI,YAAKE,KAAK,CAACC,IAAX,CAFJ,CAGA;AAHA;AAIA,IAAA,SAAS,EAAEL,4BAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAOA,oBAAC,KAAD;AACA,IAAA,IAAI,YAAKI,KAAK,CAACC,IAAX,mBADJ,CAEA;AAFA;AAGA,IAAA,SAAS,EAAEJ,uBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPA,CADJ;AAeD,CAnBH,C,CAoBA;AAEA;AACA;AACA;AACA;;;AAEA,IAAMK,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAK;AACtC;AACAL,IAAAA,qBAAqB,EAAE;AAAA,aAAMK,QAAQ,CAACL,sBAAqB,EAAtB,CAAd;AAAA;AAFe,GAAL;AAAA,CAAnC;;AAKA,eAAeH,OAAO,CAAC,IAAD,EAAOO,kBAAP,CAAP,CAAkCH,QAAlC,CAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport {Route} from 'react-router-dom';\n// import {createStructuredSelector} from 'reselect';\nimport {connect} from 'react-redux';\n\n// import {selectIsCollectionsLoaded} from '../../redux/shop/shop.selectors';\n\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPageContainer from '../collection/collection.container';\n\n// import {fetchCollectionsStartAsync} from '../../redux/shop/shop.actions';\nimport {fetchCollectionsStart} from '../../redux/shop/shop.actions';\n\n// import {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\n\n// import WithSpinner from '../../components/with-spinner/with-spinner.component';\n// const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\n// class ShopPage extends React.Component {\n//   // state = {\n//   //     loading: true,\n//   //   }\n//   // unsubscribeFromSnapshot = null;\n//   componentDidMount() {\n//   //   const {updateCollections} = this.props;\n//   //   const collectionRef = firestore.collection('collection');\n\n//   // // fetch('https://firestore.googleapis.com/v1/projects/clothing-ecommerce-react-c3cf5/databases/(default)/documents/collection')\n//   // // .then(response => response.json())\n//   // // .then(collections => console.log(collections))\n\n//   // collectionRef.get().then(snapshot => {\n//   //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//   //     updateCollections(collectionsMap);\n//   //     this.setState({loading: false});\n//   //   })\n//   const { fetchCollectionsStart} = this.props;\n//   fetchCollectionsStart();\n//   }\n//   render(){\n//     const {match} = this.props;\n//     // const {loading} = this.state;\n\nconst ShopPage =({fetchCollectionsStart, match}) =>{\n  useEffect(() =>{\n    fetchCollectionsStart();\n  },[fetchCollectionsStart])\n    return(\n        <div className='shop-page'>\n        <Route\n        exact\n        path={`${match.path}`}\n        // render={(props) =><CollectionsOverviewWithSpinner isLoading={isCollectionFetching} {...props} />}\n        component={CollectionsOverviewContainer}\n        />\n        <Route\n        path={`${match.path}/:collectionId`}\n        // render={(props) =><CollectionPageWithSpinner isLoading={!selectIsCollectionsLoaded} {...props} />}\n        component={CollectionPageContainer}\n        />\n      </div>\n    )\n  }\n// }\n\n// const mapStateToProps = createStructuredSelector({\n//   // isCollectionFetching: selectIsCollectionFetching,\n//   selectIsCollectionsLoaded: selectIsCollectionsLoaded\n// })\n\nconst mapDispatchToProps = dispatch => ({\n  // updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n\n})\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}